#!/usr/local/bin/haserl -u16384
<% -- Picochan CGI/HTML Frontend

local pico = require("picoengine");
local zlib = require("zlib");
local json = require("json");
local requests = require("requests");

local cgi = {};
local html = {};
      html.table = {};
      html.list = {};
      html.container = {};
      html.form = {};

local sitename = pico.global.get("sitename");

local function printf(...)
  io.write(string.format(...));
end

local function httpencodinglist(s)
  local ret = {};
  local list = string.tokenize(s:gsub(" ", ""):gsub(";q=%n-\\.?%n-", ""), ",");

  for i = 1, #list do
    ret[list[i]] = true;
  end

  return ret;
end

--
-- INITIALIZATION
--

cgi.outputbuf = io.tmpfile();
io.output(cgi.outputbuf);
pico.account.register_login(COOKIE["session_key"]);

cgi.headers = {};
cgi.pathinfo = ENV["PATH_INFO"] and string.tokenize(ENV["PATH_INFO"]:gsub("^/", ""), "/") or {};
cgi.encodings = ENV["HTTP_ACCEPT_ENCODING"] and httpencodinglist(ENV["HTTP_ACCEPT_ENCODING"]) or {};

--
-- CGI FUNCTIONS
--

function cgi.write_headers()
  for k, v in pairs(cgi.headers) do
    io.stdout:write(k, ": ", v, "\n");
  end

  io.stdout:write("\n");
end

-- This function compresses the output of the program and sends it according to
-- the compression algorithm preference "brotli -> gzip -> deflate -> nothing"
function cgi.finalize()
  cgi.outputbuf:seek("set");

  if cgi.encodings["gzip"] then
    cgi.headers["Content-Encoding"] = "gzip";
    cgi.write_headers();
    io.stdout:write(zlib.deflate(9, 31)(cgi.outputbuf:read("*a"), "finish"));
  elseif cgi.encodings["deflate"] then
    cgi.headers["Content-Encoding"] = "deflate";
    cgi.write_headers();
    io.stdout:write(zlib.deflate(9)(cgi.outputbuf:read("*a"), "finish"));
  else
    cgi.headers["Content-Encoding"] = "identity";
    cgi.write_headers();
    io.stdout:write(cgi.outputbuf:read("*a"));
  end

  os.exit(0);
end

--
-- HTML FUNCTIONS
--

function html.begin(...)
  local title = string.format(...);
  title = title and (title .. " - ") or "";

  printf("<!DOCTYPE html>\n");
  printf("<html>");
  printf(  "<head>");
  printf(    "<title>%s%s</title>", title, sitename);
  printf(    "<link rel='stylesheet' type='text/css' href='/static/picochan.css' />");
  printf(    "<meta charset='utf-8' />");
  printf(    "<meta name='viewport' content='width=device-width, initial-scale=1.0' />");
  printf(  "</head>");
  printf(  "<body>");
  printf(    "<nav id='topbar'><ul>");
  printf(      "<li class='system'><a href='/' accesskey='`'>home</a></li>");
  printf(      "<li class='system'><a href='/mod.html' accesskey='1'>manage</a></li>");
  printf(      "<li class='system'><a href='/log.html' accesskey='2'>log</a></li>");
  printf(      "<li class='system'><a href='/stats.html' accesskey='3'>stats</a></li>");
  printf(      "<li class='system'><a href='/overboard.html' accesskey='4'>overboard</a></li>");
  printf(      "<li class='system'><a href='/fediboard.html' accesskey='5'>fediboard</a></li>");

  local boards = pico.board.list();
  for i = 1, #boards do
    local accesskey;

    if i < 6 then
      accesskey = tostring(i + 4);
    elseif i == 6 then
      accesskey = "0";
    elseif i == 7 then
      accesskey = "-";
    elseif i == 8 then
      accesskey = "=";
    else
      accesskey = "";
    end

    printf(    "<li class='board'><a href='/%s' title='%s' accesskey='%s'>/%s/</a></li>",
               boards[i]["Name"], boards[i]["Title"], accesskey, boards[i]["Name"]);
  end

  if pico.account.current then
    printf("<span id='logged-in-notification'>Logged in as <b>%s</b> <a href='/mod.html/logout'>[Logout]</a></span>", pico.account.current["Name"]);
  end

  printf(    "</ul>");
  printf(    "<a class='invisible' href='' accesskey='r'></a>");
  printf(    "<a class='invisible' href='#postform' accesskey='p'></a>");
  printf(    "</nav>");
end

function html.finish()
  printf("<!-- %d ms generation time -->", os.clock() * 1000);
  printf("</html>");
end

function html.error(title, ...)
  cgi.outputbuf:seek("set");
  html.begin("error");
  html.redheader(title);
  html.container.begin();
  printf(...);
  html.container.finish();
  html.finish();
  cgi.finalize();
end

function html.redheader(...)
  printf("<h1 class='redheader'>%s</h1>", string.format(...));
end

function html.announce()
  local announce = pico.global.get("announce");

  if announce ~= "" then
    printf("<div id='announce'>%s</div>", announce);
  end
end

function html.container.begin(width)
  printf("<div class='container %s'>", width or "narrow");
end

function html.container.finish()
  printf("</div>");
end

function html.container.barheader(...)
  printf("<h2 class='barheader'>%s</h2>", string.format(...));
end

function html.list.begin(class)
  printf("<".."%sl>", (class == "ordered") and "o" or "u");
end

function html.list.finish(class)
  printf("</%sl>", (class == "ordered") and "o" or "u");
end

function html.list.entry(...)
  printf("<li>%s</li>", string.format(...));
end

function html.table.begin(...)
  local arg = {...};
  printf("<table>");
  printf("<tr>");

  for i = 1, #arg do
    printf("<th>%s</th>", arg[i]);
  end

  printf("</tr>");
end

function html.table.entry(...)
  local arg = {...};
  printf("<tr>");

  for i = 1, #arg do
    printf("<td>%s</td>", arg[i]);
  end

  printf("</tr>");
end

function html.table.finish()
  printf("</table>");
end

function html.date(timestamp, reldisplay)
  local difftime = os.time() - timestamp;
  local unit, multiple, decimal;
  local reltime;

  if difftime >= (60 * 60 * 24 * 365) then
    unit = "year";
    multiple = difftime / (60 * 60 * 24 * 365);
    decimal = true;
  elseif difftime >= (60 * 60 * 24 * 30) then
    unit = "month";
    multiple = difftime / (60 * 60 * 24 * 30);
    decimal = true;
  elseif difftime >= (60 * 60 * 24 * 7) then
    unit = "week";
    multiple = difftime / (60 * 60 * 24 * 7);
    decimal = false;
  elseif difftime >= (60 * 60 * 24) then
    unit = "day";
    multiple = difftime / (60 * 60 * 24);
    decimal = false;
  elseif difftime >= (60 * 60) then
    unit = "hour";
    multiple = difftime / (60 * 60);
    decimal = false;
  elseif difftime >= (60) then
    unit = "minute";
    multiple = difftime / (60);
    decimal = false;
  else
    unit = "second";
    multiple = difftime;
    decimal = false;
  end

  if decimal then
    reltime = string.format("%.1f %s%s ago", multiple, unit, multiple == 1 and "" or "s");
  else
    multiple = math.floor(multiple);
    reltime = string.format("%d %s%s ago", multiple, unit, multiple == 1 and "" or "s");
  end

  return string.format("<time datetime='%s' title='%s'>%s</time>", os.date("!%F %T", timestamp),
                       reldisplay and os.date("!%F %T %Z %z", timestamp) or reltime,
                       reldisplay and reltime or os.date("!%F %T", timestamp));
end

function html.striphtml(s)
  local ret = s
    :gsub("&", "&amp;")
    :gsub("<", "&lt;")
    :gsub(">", "&gt;")
    :gsub("'", "&#39;")
    :gsub("\"", "&quot;");
  return ret;
end

function html.unstriphtml(s)
  local ret = s
    :gsub("\"", "&quot;")
    :gsub("&#39;", "'")
    :gsub("&gt;", ">")
    :gsub("&lt;", "<")
    :gsub("&amp;", "&");
  return ret;
end

function html.picofmt(post_tbl)
  if post_tbl["Email"] and post_tbl["Email"]:match("nofo") then
    return html.striphtml(post_tbl["Comment"]);
  end

  local function handle_refs(number)
    local ref_post_tbl = pico.post.tbl(post_tbl["Board"], number);

    if not ref_post_tbl then
      return string.format("<s><a class='reference'>&gt;&gt;%d</a></s>", number);
    elseif ref_post_tbl["Parent"] == post_tbl["Parent"] then
      return string.format("<a class='reference' href='#%d'>&gt;&gt;%d</a>", number, number);
    else
      return string.format("<a class='reference' href='/%s/%d#%d'>&gt;&gt;%d</a>",
                           ref_post_tbl["Board"], ref_post_tbl["Parent"] or number, number, number);
    end
  end

  local function handle_xbrefs(board, number)
    if not tonumber(number) then
      return string.format("<a class='reference' href='/%s'>&gt;&gt;&gt;/%s/</a>%s", board, board, number);
    end

    local ref_post_tbl = pico.post.tbl(board, number);

    if not ref_post_tbl then
      return string.format("<s><a class='reference'>&gt;&gt;&gt;/%s/%s</a></s>", board, number or "");
    else
      return string.format("<a class='reference' href='/%s/%d#%d'>&gt;&gt;&gt;/%s/%d</a>",
                            ref_post_tbl["Board"], ref_post_tbl["Parent"] or number, number, board, number);
    end
  end

  local function handle_xhrefs(host, board, number)
    local webring_tbl = json.webring();
    local known = webring_tbl["known"];
    known[0] = webring_tbl["url"];
    for i = 0, #known do
      local stripped = known[i]:match("^(https?://[^/]+).*$")
      if stripped:gsub("^https?://", "") == host then
        local response = requests.get(string.format("%s/%s/%s", stripped, board, number));
        local status_code = response["status_code"];
        if status_code == 200 or status_code == 301 then
          return string.format("<a class='reference' href='%s/%s/%s'>&gt;&gt;&gt;&gt;/%s/%s/%s</a>",
                                stripped, board, number, host, board, number);
        else
          local status_code = requests.get(string.format("%s/%s/", stripped, board))["status_code"];
          if status_code == 200 then
            return string.format("<a class='reference' href='%s/%s/'>&gt;&gt;&gt;&gt;/%s/%s/</a>%s",
                                  stripped, board, host, board, number);
          else
            return string.format("<s><a class='reference'>&gt;&gt;&gt;&gt;/%s/%s/%s</a></s>", host, board, number);
          end
        end
      end
    end
  end

  local function handle_url(url)
    url = html.unstriphtml(url);
    local append = html.striphtml(url:match("[<>'\"]+$") or "");
    url = url:gsub("[<>'\"]+$", "");
    url = html.striphtml(url);
    return string.format("<a href='%s'>%s</a>%s", url, url, append);
  end

  local s = "\n" .. html.striphtml(post_tbl["Comment"]) .. "\n";
  s = s:gsub("https?://[a-zA-Z0-9%.%%%-%+%(%)_/=%?&;:,#]+", handle_url);
  s = s:gsub("&gt;&gt;&gt;&gt;/([%d%l.]+)/([%d%l]-)/(%d+)", handle_xhrefs);
  s = s:gsub("&gt;&gt;&gt;/([%d%l]-)/(%d+)", handle_xbrefs);
  s = s:gsub("&gt;&gt;&gt;/([%d%l]-)/(%s)", handle_xbrefs);
  s = s:gsub("&gt;&gt;(%d+)", handle_refs);
  s = s:gsub("&#39;&#39;&#39;([^\r\n]-)&#39;&#39;&#39;", "<b>%1</b>");
  s = s:gsub("&#39;&#39;([^\r\n]-)&#39;&#39;", "<i>%1</i>");
  s = s:gsub("~~([^\r\n]-)~~", "<s>%1</s>");
  s = s:gsub("__([^\r\n]-)__", "<u>%1</u>");
  s = s:gsub("==([^%s][^\r\n]-[^%s])==", "<span class='redtext'>%1</span>");
  s = s:gsub("%*%*([^\r\n]-)%*%*", "<span class='spoiler'>%1</span>");
  s = s:gsub("%(%(%([^\r\n]-%)%)%)", "<span class='kiketext'>%1</span>");
  s = s:gsub("([\r\n])(&gt;.-)([\r\n])", "%1<span class='greentext'>%2</span>%3");
  s = s:gsub("([\r\n])(&lt;.-)([\r\n])", "%1<span class='pinktext'>%2</span>%3");

  s = s:gsub("^[\r\n]+", "");
  s = s:gsub("[\r\n]+$", "");
  return s;
end

function html.formatfilesize(size)
  if size > (1024 * 1024) then
    return string.format("%.2f MiB", (size / 1024 / 1024));
  elseif size > 1024 then
    return string.format("%.2f KiB", (size / 1024));
  else
    return string.format("%d B", size);
  end
end

function html.modlinks(board_tbl, post_tbl)
  local board = board_tbl["Name"];
  local number = post_tbl["Number"];

  if (not pico.account.current)
     or (pico.account.current["Board"]
         and pico.account.current["Board"] ~= board) then
    return;
  end

  printf("<span class='mod-links'>");
  printf("<a href='/mod.html/post/delete/%s/%d'>[D]</a>", board, number);

  if not post_tbl["Parent"] then
    printf("<a href='/mod.html/post/sticky/%s/%d'>[S]</a>", board, number);
    printf("<a href='/mod.html/post/lock/%s/%d'>[L]</a>", board, number);
    printf("<a href='/mod.html/post/autosage/%s/%d'>[A]</a>", board, number);
    printf("<a href='/mod.html/post/cycle/%s/%d'>[C]</a>", board, number);
  end

  printf("</span>");
end

function html.threadflags(post_tbl)
  if (post_tbl["Sticky"] == 1 or post_tbl["Lock"] == 1
      or post_tbl["Autosage"] == 1 or post_tbl["Cycle"] == 1) then
    printf("<span class='thread-flags'>");
    printf("%s%s%s%s",
      post_tbl["Sticky"]   == 1 and "(S)" or "",
      post_tbl["Lock"]     == 1 and "(L)" or "",
      post_tbl["Autosage"] == 1 and "(A)" or "",
      post_tbl["Cycle"]    == 1 and "(C)" or "");
    printf("</span>");
  end
end

function html.renderpostfiles(board_tbl, post_tbl)
  local function findthumbsize(w, h)
    local tw, th;

    if w <= 200 and h <= 200 then
      tw = w;
      th = h;
    elseif h > w then
      th = 200;
      tw = math.ceil(w / h * 200);
    elseif w >= h then
      tw = 200;
      th = math.ceil(h / w * 200);
    end

    return tw, th;
  end

  local file_tbl = pico.file.list(board_tbl["Name"], post_tbl["Number"]);
  if file_tbl then
    for i = 1, #file_tbl do
      local file = file_tbl[i];
      local filename = file["Name"];
      local extension = pico.file.extension(filename);
      local class = pico.file.class(extension);

      printf("<div class='post-file%s'>", #file_tbl == 1 and "-single" or "");
      printf("<div class='post-file-info'>");
      printf("<a href='/media/%s' title='Open file in new tab' target='_blank'>%s</a><br />%s%s",
             filename, (#file_tbl == 1 and filename or filename:sub(1, 16) .. "..." .. extension),
             html.formatfilesize(file["Size"]), file["Width"] and (" " .. file["Width"] .. "x" .. file["Height"]) or "");
      printf(" <a href='/media/%s' title='Download file' download>(dl)</a>", filename);

      if pico.account.current and ((not pico.account.current["Board"])
                                   or (pico.account.current["Board"] == board_tbl["Name"])) then
        printf(" <span class='mod-links'>");
        printf("<a href='/mod.html/post/unlink/%s/%d/%s' title='Unlink File'>[U]</a>",
               board_tbl["Name"], post_tbl["Number"], filename);

        if not pico.account.current["Board"] then
          printf("<a href='/mod.html/file/delete/%s' title='Delete File'>[F]</a>",
                 filename);
        end

        printf("</span>");
      end

      printf("</div>");

      if class == "image" or extension == "pdf" then
        printf("<style>input[type='checkbox']:checked + img.post-file-thumbnail[src='/media/thumb/%s'] + div.post-file-fullsize::after " ..
               "{content: url('/media/%s');}</style>", filename, filename, file["Width"], file["Height"]);

        printf("<label>");
        printf("<input type='checkbox' hidden />");
        printf("<img class='post-file-thumbnail' src='/media/thumb/%s' width='%d' height='%d' />",
               filename, findthumbsize(file["Width"], file["Height"]));
        printf("<div class='post-file-fullsize'></div>");
        printf("</label>");
      elseif extension == "epub" then
        printf("<img class='post-file-thumbnail' src='/static/epub.png' width=100 height=70 />");
      elseif class == "video" then
        printf("<video class='post-video' controls loop preload='none' src='/media/%s' poster='/media/thumb/%s'></video>", filename, filename);
      elseif class == "audio" then
        printf("<audio class='post-audio' controls loop preload='none' src='/media/%s'></audio>", filename);
      end

      printf("</div>");
    end
  end
end

function html.renderpost(board_tbl, post_tbl)
  printf("<div id='%d' class='post'>", post_tbl["Number"]);
  printf("<div class='post-header'>");

  if post_tbl["Subject"] ~= "" then
    printf("<span class='post-subject'>%s</span>", html.striphtml(post_tbl["Subject"]));
  end

  printf("<span class='post-name'>");

  if post_tbl["Email"] ~= "" then
    printf("<a class='post-email' href='mailto:%s'>%s</a>",
           html.striphtml(post_tbl["Email"]), html.striphtml(post_tbl["Name"]));
  else
    printf("%s", html.striphtml(post_tbl["Name"]));
  end

  printf("</span>");
  printf("<span class='post-date'>%s</span>", html.date(post_tbl["Date"]));
  printf("<span class='post-number'><a href='#%d'>No.</a><a href='#postform'>%d</a></span>", post_tbl["Number"], post_tbl["Number"]);

  html.threadflags(post_tbl);
  html.modlinks(board_tbl, post_tbl);

  local reflist = pico.post.refs(board_tbl["Name"], post_tbl["Number"]);
  for i = 1, #reflist do
    printf("<a class='referrer' href='#%d'>&gt;&gt;%d</a> ", reflist[i], reflist[i]);
  end

  printf("</div>");
  html.renderpostfiles(board_tbl, post_tbl);
  printf("<div class='post-comment'>%s</div>", html.picofmt(post_tbl));
  printf("</div>");
end

function html.rendercatalog(board_tbl, post_tbl)
  local board = board_tbl and board_tbl["Name"] or post_tbl["Board"];
  local number = post_tbl["Number"];
  local base_url = post_tbl["Host"] or "";
  local short_url = base_url:gsub("https?://", "");

  printf("<div class='catalog-thread'>");
  printf("<a class='catalog-thread-link' href='%s/%s/%d'>", base_url, board, number);

  if post_tbl["File"] then
    local extension = pico.file.extension(post_tbl["File"]);
    local class = pico.file.class(extension);

    if class == "image" or class == "video" or extension == "pdf" then
      printf("<img alt='***' src='%s/media/icon/%s' />", base_url, post_tbl["File"]);
    elseif class == "audio" then
      printf("<img alt='***' src='%s/static/audio.png' width=100 height=70 />", base_url);
    elseif extension == "epub" then
      printf("<img alt='***' src='%s/static/epub.png' width=100 height=70 />", base_url);
    end
  else
    printf("***");
  end

  printf("</a>");
  printf("<div class='catalog-thread-info'>");
  printf("<a href='%s/%s'>%s/%s/</a> R:%d ", base_url, board, short_url, board, pico.post.threadreplycount(board, number));
  html.threadflags(post_tbl);
  printf("</div>");

  printf("<div class='catalog-thread-lastbumpdate'>Bump: %s</div>", html.date(post_tbl["LastBumpDate"], true));
  printf("<div class='catalog-thread-subject'>%s</div>", html.striphtml(post_tbl["Subject"]));
  printf("<div class='catalog-thread-comment'>%s</div>", html.picofmt(post_tbl));

  printf("</div>");
end

function html.form.postform(board_tbl, parent)
  printf("<fieldset><form id='postform' action='/post.html' method='POST' enctype='multipart/form-data'>");
  printf(  "<input name='board' value='%s' type='hidden' />", board_tbl["Name"]);

  if parent ~= nil then
    printf("<input name='parent' value='%d' type='hidden' />", parent);
  end

  printf(  "<a class='close-button' href='##' accesskey='w'>[X]</a>");
  printf(  "<label for='name'>Name</label><input id='name' name='name' type='text' maxlength=64 /><br />");
  printf(  "<label for='email'>Email</label><input id='email' name='email' type='text' maxlength=64 /><br />");
  printf(  "<label for='subject'>Subject</label><input id='subject' name='subject' type='text' maxlength=64 />");
  printf(  "<input type='submit' value='Post' accesskey='s' /><br />");
  printf(  "<label for='comment'>Comment</label><textarea id='comment' name='comment' form='postform' rows=5 cols=35 maxlength=%d></textarea><br />", board_tbl["PostMaxLength"]);

  for i = 1, board_tbl["PostMaxImages"] do
    printf("<label for='file%d'>File %d</label><input id='file%d' name='file%d' type='file' />%s", i, i, i, i, i ~= board_tbl["PostMaxImages"] and "<br />" or "");
  end

  if parent == nil and board_tbl["ThreadCaptcha"] == 1
     or parent ~= nil and board_tbl["PostCaptcha"] == 1 then
    local captchaid, captchab64 = pico.captcha.create();

    printf("<input name='captchaid' value='%s' type='hidden' />", captchaid);
    printf("<br /><label for='captcha'>Captcha</label><input id='captcha' name='captcha' type='text' pattern='[a-zA-Z]{6}' maxlength=6 required /><br />");
    printf("<img id='captcha-image' src='data:image/jpeg;base64,%s' />", captchab64);
  end

  printf("</form></fieldset>");
end

function html.form.mod_login()
  printf("<fieldset><form method='POST'>");
  printf(  "<label for='username'>Username</label><input id='username' name='username' type='text' required /><br />");
  printf(  "<label for='password'>Password</label><input id='password' name='password' type='password' required /><br />");
  printf(  "<label for='submit'>Submit</label><input id='submit' type='submit' value='Continue' />");
  printf("</form></fieldset>");
end

function html.form.board_create()
  printf("<fieldset><form method='POST'>");
  printf(  "<label for='name'>Name</label><input id='name' name='name' type='text' required /><br />");
  printf(  "<label for='title'>Title</label><input id='title' name='title' type='text' required /><br />");
  printf(  "<label for='subtitle'>Subtitle</label><input id='subtitle' name='subtitle' type='text' /><br />");
  printf(  "<label for='submit'>Submit</label><input id='submit' type='submit' value='Create' />");
  printf("</form></fieldset>");
end

function html.form.board_delete()
  printf("<fieldset><form method='POST'>");
  printf(  "<label for='name'>Name</label><input id='name' name='name' type='text' required /><br />");
  printf(  "<label for='reason'>Reason</label><input id='reason' name='reason' type='text' /><br />");
  printf(  "<label for='submit'>Submit</label><input id='submit' type='submit' value='Delete' />");
  printf("</form></fieldset>");
end

function html.form.board_config_select()
  printf("<fieldset><form method='POST'>");
  printf(  "<label for='Name'>Name</label><input id='Name' name='Name' type='text' required /><br />");
  printf(  "<label for='submit'>Submit</label><input id='submit' type='submit' value='Continue' />");
  printf("</form></fieldset>");
end

function html.form.board_config(board)
  local board_tbl = pico.board.tbl(board);

  printf("<fieldset><form method='POST'>");
  printf(  "<input type='hidden' name='Name' value='%s' />", board_tbl["Name"]);
  printf(  "<label for='Title'>Title</label><input id='Title' name='Title' type='text' value='%s' maxlength=32 required /><br />", html.striphtml(board_tbl["Title"]));
  printf(  "<label for='Subtitle'>Subtitle</label><input id='Subtitle' name='Subtitle' type='text' value='%s' maxlength=64 /><br />", html.striphtml(board_tbl["Subtitle"]));
  printf(  "<label for='Lock'>Lock</label><input id='Lock' name='Lock' type='checkbox' value=1 %s/><br />", board_tbl["Lock"] == 1 and "checked " or "");
  printf(  "<label for='DisplayOverboard'>DisplayOverboard</label><input id='DisplayOverboard' name='DisplayOverboard' type='checkbox' value=1 %s/><br />", board_tbl["DisplayOverboard"] == 1 and "checked " or "");
  printf(  "<label for='PostMaxImages'>PostMaxImages</label><input id='PostMaxImages' name='PostMaxImages' type='number' value='%d' min=0 max=5 required /><br />", board_tbl["PostMaxImages"]);
  printf(  "<label for='ThreadMinLength'>ThreadMinLength</label><input id='ThreadMinLength' name='ThreadMinLength' type='number' value='%d' required /><br />", board_tbl["ThreadMinLength"]);
  printf(  "<label for='PostMaxLength'>PostMaxLength</label><input id='PostMaxLength' name='PostMaxLength' type='number' value='%d' required /><br />", board_tbl["PostMaxLength"]);
  printf(  "<label for='PostMaxNewlines'>PostMaxNewlines</label><input id='PostMaxNewlines' name='PostMaxNewlines' type='number' value='%d' required /><br />", board_tbl["PostMaxNewlines"]);
  printf(  "<label for='PostMaxDblNewlines'>PostMaxDblNewlines</label><input id='PostMaxDblNewlines' name='PostMaxDblNewlines' type='number' value='%d' required /><br />", board_tbl["PostMaxDblNewlines"]);
  printf(  "<label for='TPHLimit'>TPHLimit</label><input id='TPHLimit' name='TPHLimit' type='number' value='%d' required /><br />", board_tbl["TPHLimit"]);
  printf(  "<label for='PPHLimit'>PPHLimit</label><input id='PPHLimit' name='PPHLimit' type='number' value='%d' required /><br />", board_tbl["PPHLimit"]);
  printf(  "<label for='ThreadCaptcha'>ThreadCaptcha</label><input id='ThreadCaptcha' name='ThreadCaptcha' type='checkbox' value=1 %s/><br />", board_tbl["ThreadCaptcha"] == 1 and "checked " or "");
  printf(  "<label for='PostCaptcha'>PostCaptcha</label><input id='PostCaptcha' name='PostCaptcha' type='checkbox' value=1 %s/><br />", board_tbl["PostCaptcha"] == 1 and "checked " or "");
  printf(  "<label for='CaptchaTriggerTPH'>CaptchaTriggerTPH</label><input id='CaptchaTriggerTPH' name='CaptchaTriggerTPH' type='number' value='%d' required /><br />", board_tbl["CaptchaTriggerTPH"]);
  printf(  "<label for='CaptchaTriggerPPH'>CaptchaTriggerPPH</label><input id='CaptchaTriggerPPH' name='CaptchaTriggerPPH' type='number' value='%d' required /><br />", board_tbl["CaptchaTriggerPPH"]);
  printf(  "<label for='BumpLimit'>BumpLimit</label><input id='BumpLimit' name='BumpLimit' type='number' value='%d' min=0 max=1000 required /><br />", board_tbl["BumpLimit"]);
  printf(  "<label for='PostLimit'>PostLimit</label><input id='PostLimit' name='PostLimit' type='number' value='%d' min=0 max=1000 required /><br />", board_tbl["PostLimit"]);
  printf(  "<label for='ThreadLimit'>ThreadLimit</label><input id='ThreadLimit' name='ThreadLimit' type='number' value='%d' min=0 max=1000 required /><br />", board_tbl["ThreadLimit"]);
  printf(  "<label for='submit'>Submit</label><input id='submit' type='submit' value='Configure' />");
  printf("</form></fieldset>");
end

function html.form.account_create()
  printf("<fieldset><form id='account-create' method='POST'>");
  printf("<label for='name'>Name</label><input id='name' name='name' type='text' required /><br />");
  printf("<label for='password'>Password</label><input id='password' name='password' type='password' pattern='.{6,128}' maxlength=128 required /><br />");
  printf("<label for='type'>Type</label><select form='account-create' id='type' name='type'>");
  printf(  "<option value='admin'>Administrator</option>");
  printf(  "<option value='bo'>Board Owner</option>");
  printf(  "<option value='gvol'>Global Volunteer</option>");
  printf(  "<option value='lvol' selected>Local Volunteer</option>");
  printf("</select><br />");
  printf("<label for='board'>Board</label><input id='board' name='board' type='text' /><br />");
  printf("<label for='submit'>Submit</label><input id='submit' type='submit' value='Create' />");
  printf("</form></fieldset>");
end

function html.form.account_delete()
  printf("<fieldset><form method='POST'>");
  printf("<label for='name'>Name</label><input id='name' name='name' type='text' required /><br />");
  printf("<label for='reason'>Reason</label><input id='reason' name='reason' type='text' required /><br />");
  printf("<label for='submit'>Submit</label><input id='submit' type='submit' value='Delete' />");
  printf("</form></fieldset>");
end

function html.form.account_config()
  printf("<fieldset><form method='POST'>");
  printf("<label for='name'>Account</label><input id='name' name='name' type='text' value='%s' required /><br />", pico.account.current["Name"]);
  printf("<label for='password'>Password</label><input id='password' name='password' type='password' required /><br />");
  printf("<label for='submit'>Submit</label><input id='submit' type='submit' value='Change Password' />");
  printf("</form></fieldset>");
end

function html.form.globalconfig(varname)
  printf("<fieldset><form id='globalconfig' method='POST'>");
  printf("<input type='hidden' name='name' value='%s' />", varname);

  if varname == "frontpage" or varname == "announce" then
    printf("<label for='value'>%s</label><textarea id='value' name='value' form='globalconfig' cols=40 rows=12>%s</textarea>",
           varname, html.striphtml(pico.global.get(varname)) or "");
  else
    printf("<label for='value'>%s</label><input id='value' name='value' value='%s' type='text' />",
           varname, html.striphtml(pico.global.get(varname)) or "");
  end
  printf("<br /><label for='submit'>Submit</label><input id='submit' type='submit' value='Set' />");
  printf("</form></fieldset>");
end

function html.form.mod_action_reason()
  printf("<fieldset><form method='POST'>");
  printf("<label for='reason'>Reason</label><input id='reason' name='reason' type='text' required />");
  printf("<input type='submit' value='Continue' />");
  printf("</form></fieldset>");
end

--
-- JSON FUNCTIONS
--

function json.webring()
  local fd = assert(io.open("webring.json", "r"));
  local data = assert(fd:read("*a"));
  fd:close();

  local webring = assert(json.decode(data));
  assert(webring["url"]);
  assert(webring["logo"]);
  assert(webring["following"]);
  assert(webring["known"]);

  webring["name"] = webring["name"] or sitename;
  webring["endpoint"] = webring["url"] .. "/" .. "webring.json";
  webring["boards"] = {};

  local boards = pico.board.list();
  for i = 1, #boards do
    local board = {};
    local board_tbl = pico.board.tbl(boards[i]["Name"]);
    board["uri"] = board_tbl["Name"];
    board["title"] = board_tbl["Title"];
    board["subtitle"] = board_tbl["Subtitle"];
    board["path"] = webring["url"] .. "/" .. board_tbl["Name"] .. "/";
    board["postsPerHour"] = pico.board.stats.postrate(board_tbl["Name"], 1, 1);
    board["totalPosts"] = pico.board.stats.totalposts(board_tbl["Name"]);
    board["tags"] = {};
    board["lastPostTimestamp"] = os.date("%Y-%m-%dT%H:%M:%SZ",
      pico.board.stats.lastbumpdate(board_tbl["Name"]));
    webring["boards"][i] = board;
  end

  return webring
end

--
-- PAGE DEFINITIONS
--

cgi.headers["Content-Type"] = "text/html; charset=utf-8";
cgi.headers["Cache-Control"] = "no-cache";
--cgi.headers["Content-Security-Policy"] = "default-src 'none'; img-src 'self' data:; style-src 'self' 'unsafe-inline'; media-src 'self';";
cgi.headers["Referrer-Policy"] = "no-referrer";
cgi.headers["X-DNS-Prefetch-Control"] = "off";
cgi.headers["X-Frame-Options"] = "deny";

if cgi.pathinfo[1] == nil or cgi.pathinfo[1] == "" then
  html.begin("welcome");
  html.redheader("Welcome to %s", sitename);
  html.container.begin();
  printf(pico.global.get("frontpage") or "");
  html.container.finish();
  html.finish();
elseif cgi.pathinfo[1] == "mod.html" then
    if not pico.account.current and cgi.pathinfo[2] ~= "login" then
      cgi.headers["Status"] = "303 See Other";
      cgi.headers["Location"] = "/mod.html/login";
      cgi.finalize();
    end

    if cgi.pathinfo[2] == nil or cgi.pathinfo[2] == "" then
      html.begin("dashboard");
      html.redheader("Moderation Dashboard");
      html.container.begin();
      printf("You are logged in as <b>%s</b>. Your account type is <b>%s</b>.",
             pico.account.current["Name"], pico.account.current["Type"]);
      html.container.barheader("Global");
      html.list.begin("unordered");
      html.list.entry("<a href='/mod.html/global/announce'>Change global announcement</a>");
      html.list.entry("<a href='/mod.html/global/sitename'>Change site name</a>");
      html.list.entry("<a href='/mod.html/global/frontpage'>Change front-page content</a>");
      html.list.entry("<a href='/mod.html/global/defaultpostname'>Change default post name</a>");
      html.list.finish();
      html.container.barheader("Accounts");
      html.list.begin("unordered");
      html.list.entry("<a href='/mod.html/account/create'>Create an account</a>");
      html.list.entry("<a href='/mod.html/account/delete'>Delete an account</a>");
      html.list.entry("<a href='/mod.html/account/config'>Configure an account</a>");
      html.list.finish();
      html.container.barheader("Boards");
      html.list.begin("unordered");
      html.list.entry("<a href='/mod.html/board/create'>Create a board</a>");
      html.list.entry("<a href='/mod.html/board/delete'>Delete a board</a>");
      html.list.entry("<a href='/mod.html/board/config'>Configure a board</a>");
      html.list.finish();
      html.container.finish();
      html.finish();
    elseif cgi.pathinfo[2] == "login" then
      html.begin("login");
      html.redheader("Moderator Login");
      html.container.begin();

      if POST["username"] and POST["password"] then
        local session_key, errmsg = pico.account.login(POST["username"], POST["password"]);

        if not session_key then
          printf("Cannot log in: %s", errmsg);
        else
          cgi.headers["Set-Cookie"] = "session_key=" .. session_key .. "; HttpOnly; Path=/; SameSite=Strict";
          cgi.headers["Status"] = "303 See Other";
          cgi.headers["Location"] = "/mod.html";
          cgi.finalize();
        end
      end

      html.container.barheader("Enter information");
      html.form.mod_login();
      html.container.finish();
      html.finish();
    elseif cgi.pathinfo[2] == "logout" then
      pico.account.logout();
      cgi.headers["Set-Cookie"] = "session_key=; HttpOnly; Path=/; Expires=Thursday, 1 Jan 1970 00:00:00 GMT; SameSite=Strict";
      cgi.headers["Status"] = "303 See Other";
      cgi.headers["Location"] = "/overboard.html";
      cgi.finalize();
    elseif cgi.pathinfo[2] == "global" then
      html.begin("change global configuration");
      html.redheader("Edit global configuration variable");
      html.container.begin();

      if POST["name"] then
        local result, msg;
        if POST["value"] == "" then
          result, msg = pico.global.set(POST["name"], nil);
        else
          result, msg = pico.global.set(POST["name"], POST["value"]);
        end

        printf("%s: %s", result and "Variable set" or "Cannot set variable", msg);
      end

      html.form.globalconfig(cgi.pathinfo[3]);
      html.container.finish();
      html.finish();
    elseif cgi.pathinfo[2] == "account" then
      if cgi.pathinfo[3] == "create" then
        html.begin("create account");
        html.redheader("Create an Account");
        html.container.begin();

        if POST["name"] ~= nil and POST["name"] ~= "" then
          printf("%s", select(2, pico.account.create(POST["name"], POST["password"], POST["type"], POST["board"])));
        end

        html.form.account_create();
        html.container.finish();
        html.finish();
      elseif cgi.pathinfo[3] == "delete" then
        html.begin("delete account");
        html.redheader("Delete an Account");
        html.container.begin();

        if POST["name"] and POST["reason"] then
          local status, msg = pico.account.delete(POST["name"], POST["reason"]);
          printf("%s%s", (not status) and "Cannot delete account: " or "", msg);
        end

        html.form.account_delete();
        html.container.finish();
        html.finish();
      elseif cgi.pathinfo[3] == "config" then
        html.begin("configure account");
        html.redheader("Configure an Account");
        html.container.begin();

        if POST["name"] and POST["password"] then
          printf("%s", select(2, pico.account.changepass(POST["name"], POST["password"])));
        end

        html.form.account_config();
        html.container.finish();
        html.finish();
      end
    elseif cgi.pathinfo[2] == "board" then
      if cgi.pathinfo[3] == "create" then
        html.begin("create board");
        html.redheader("Create a Board");
        html.container.begin();

        if POST["name"] and POST["title"] and POST["subtitle"] then
          local status, msg = pico.board.create(POST["name"], POST["title"], POST["subtitle"]);
          printf("%s%s", (not status) and "Cannot create board: " or "", msg);
        end

        html.form.board_create();
        html.container.finish();
        html.finish();
      elseif cgi.pathinfo[3] == "delete" then
        html.begin("delete board");
        html.redheader("Delete a Board");
        html.container.begin();

        if POST["name"] and POST["reason"] then
          local status, msg = pico.board.delete(POST["name"], POST["reason"]);
          printf("%s%s", (not status) and "Cannot delete board: " or "", msg);
        end

        html.form.board_delete();
        html.container.finish();
        html.finish();
      elseif cgi.pathinfo[3] == "config" then
        html.begin("configure board");
        html.redheader("Configure a Board");
        html.container.begin();

        if POST["Name"] == nil or POST["Name"] == "" then
          html.form.board_config_select();
        elseif not pico.board.exists(POST["Name"]) then
          printf("Cannot configure board: Board does not exist");
          html.form.board_config_select();
        else
          if POST["Title"] then
            local status, msg = pico.board.configure(POST);
            printf("%s%s", (not status) and "Cannot configure board: " or "", msg);
          end

          html.form.board_config(POST["Name"]);
        end

        html.container.finish();
        html.finish();
      end
    elseif cgi.pathinfo[2] == "post" then
      if not (cgi.pathinfo[3] == "delete"
              or cgi.pathinfo[3] == "unlink"
              or cgi.pathinfo[3] == "sticky"
              or cgi.pathinfo[3] == "lock"
              or cgi.pathinfo[3] == "autosage"
              or cgi.pathinfo[3] == "cycle") then
        html.error("Invalid action", "Action is invalid");
      end

      html.begin("%s post", cgi.pathinfo[3]);
      html.redheader("Modify or Delete a Post");
      html.container.begin();

      local board_tbl = pico.board.tbl(cgi.pathinfo[4]);
      local post_tbl, msg = pico.post.tbl(cgi.pathinfo[4], cgi.pathinfo[5]);

      if not post_tbl then
        html.error("Action failed", "Cannot find post: %s", msg);
      end

      if POST["reason"] and POST["reason"] ~= "" then
        local result, msg;

        if cgi.pathinfo[3] == "delete" then
          result, msg = pico.post.delete(cgi.pathinfo[4], cgi.pathinfo[5], POST["reason"]);
        elseif cgi.pathinfo[5] == "unlink" then
          result, msg = pico.post.unlink(cgi.pathinfo[4], cgi.pathinfo[5], cgi.pathinfo[6], POST["reason"]);
        else
          result, msg = pico.post.toggle(cgi.pathinfo[3], cgi.pathinfo[4], cgi.pathinfo[5], POST["reason"]);
        end

        if not result then
          html.error("Action failed", "Backend returned error: %s", msg);
        else
          cgi.headers["Status"] = "303 See Other";
          cgi.headers["Location"] =
            post_tbl["Parent"] and ("/" .. board_tbl["Name"] .. "/" .. post_tbl["Parent"])
                                or ("/" .. board_tbl["Name"] .. "/" .. post_tbl["Number"]);
          cgi.finalize();
        end;
      end

      printf("You are about to <b>%s</b>%s the following post:", cgi.pathinfo[3],
             cgi.pathinfo[3] == "unlink" and " " .. cgi.pathinfo[6] .. " from" or "");
      html.renderpost(board_tbl, post_tbl);
      html.form.mod_action_reason();
      html.container.finish();
      html.finish();
    elseif cgi.pathinfo[2] == "file" then
      if cgi.pathinfo[3] == "delete" then
        html.begin("delete file");
        html.redheader("Delete a File");
        html.container.begin();

        if POST["reason"] and POST["reason"] ~= "" then
          local result, msg = pico.file.delete(cgi.pathinfo[4], POST["reason"]);

          if not result then
            html.error("Action failed", "Backend returned error: %s", msg);
          else
            cgi.headers["Status"] = "303 See Other";
            cgi.headers["Location"] = "/overboard.html";
            cgi.finalize();
          end
        end

        printf("You are about to <b>delete</b> the file %s from <i>all boards</i>.", cgi.pathinfo[4]);
        html.form.mod_action_reason();
        html.container.finish();
        html.finish();
      end
    end
  elseif cgi.pathinfo[1] == "log.html" then
    html.begin("logs");
    html.redheader("Moderation Logs");
    html.container.begin("wide");

    local page = tonumber(GET["page"] or 1);
    page = (page < 1) and 1 or page;

    printf("<div class='mod-log-page-switcher'>");
    printf("<a class='mod-log-page-switcher-prev' href='?page=%d'>[Prev]</a>", page - 1);
    printf("<a class='mod-log-page-switcher-next' href='?page=%d'>[Next]</a>", page + 1);
    printf("</div>");
    html.table.begin("Account", "Board", "Date", "Description");

    local log_tbl = pico.log.retrieve(page);
    for i = 1, #log_tbl do
      local entry = log_tbl[i];

      html.table.entry(entry["Account"] == "SYSTEM" and "<i>SYSTEM</i>" or entry["Account"],
                       entry["Board"] == "GLOBAL" and "<i>GLOBAL</i>" or string.format("<a href='/%s'>/%s/</a>", entry["Board"], entry["Board"]),
                       html.date(entry["Date"]),
                       html.striphtml(entry["Description"]));
    end

    html.table.finish();
    printf("<div class='mod-log-page-switcher'>");
    printf("<a class='mod-log-page-switcher-prev' href='?page=%d'>[Prev]</a>", page - 1);
    printf("<a class='mod-log-page-switcher-next' href='?page=%d'>[Next]</a>", page + 1);
    printf("</div>");
    html.container.finish();
    html.finish();
  elseif cgi.pathinfo[1] == "stats.html" then
    html.begin("stats");
    html.redheader("Posting Statistics");
    html.container.begin("wide");
    html.table.begin("Board", "TPW (7d)", "TPD (1d)", "PPD (7d)", "PPD (1d)", "PPH (1h)", "Total Posts");

    local g_tpw7d = 0;
    local g_tpd1d = 0;
    local g_ppd7d = 0;
    local g_ppd1d = 0;
    local g_pph1h = 0;
    local g_total = 0;
    local board_list_tbl = pico.board.list();
    for i = 1, #board_list_tbl do
      local board = board_list_tbl[i]["Name"];
      local tpw7d = pico.board.stats.threadrate(board, 24 * 7, 1);
      local tpd1d = pico.board.stats.threadrate(board, 24, 1);
      local ppd7d = pico.board.stats.postrate(board, 24, 7);
      local ppd1d = pico.board.stats.postrate(board, 24, 1);
      local pph1h = pico.board.stats.postrate(board, 1, 1);
      local total = pico.board.stats.totalposts(board);

      g_tpw7d = g_tpw7d + tpw7d;
      g_tpd1d = g_tpd1d + tpd1d;
      g_ppd7d = g_ppd7d + ppd7d;
      g_ppd1d = g_ppd1d + ppd1d;
      g_pph1h = g_pph1h + pph1h;
      g_total = g_total + total;

      html.table.entry(string.format("<a href='/%s' title='%s'>/%s/</a>", board, board_list_tbl[i]["Title"], board),
                       tpw7d, tpd1d, ppd7d, ppd1d, pph1h, total);
    end

    html.table.entry("<i>GLOBAL</i>", g_tpw7d, g_tpd1d, g_ppd7d, g_ppd1d, g_pph1h, g_total);
    html.table.finish();
    html.container.finish();
    html.finish();
  elseif cgi.pathinfo[1] == "post.html" then
    local file_hashes = {};

    -- step 1. add all the files of the post (if any) to pico's file registration
    for i = 1, 5 do
      if POST["file" .. i .. "_name"] and POST["file" .. i .. "_name"] ~= "" then
        local hash, msg = pico.file.add(HASERL["file" .. i .. "_path"]);

        if not hash then
          cgi.headers["Status"] = "400 Bad Request";
          html.error("File Upload Error", "Cannot add file #%d: %s", i, msg);
        end

        file_hashes[#file_hashes + 1] = hash;
      end
    end

    -- step 2. create the post itself
    local number, msg = pico.post.create(
      POST["board"], POST["parent"],
      POST["name"], POST["email"], POST["subject"],
      POST["comment"], file_hashes,
      POST["captchaid"], POST["captcha"]
    );

    if not number then
      cgi.headers["Status"] = "400 Bad Request";
      html.error("Posting Error", "Cannot make post: %s", msg);
    end

    cgi.headers["Status"] = "303 See Other";

    if not POST["parent"] then
      cgi.headers["Location"] = "/" .. POST["board"] .. "/" .. number;
    else
      cgi.headers["Location"] = "/" .. POST["board"] .. "/" .. POST["parent"] .. "#" .. number;
    end
elseif cgi.pathinfo[1] == "overboard.html" then
  html.begin("overboard");
  html.redheader("%s Overboard", sitename);
  html.announce();
  printf("<a href=''>[Update]</a><hr /><div class='catalog-container'>");

  local overboard_tbl = pico.board.overboard();
  for i = 1, #overboard_tbl do
    html.rendercatalog(board_tbl, overboard_tbl[i]);
  end

  printf("</div>");
  html.finish();
elseif cgi.pathinfo[1] == "fediboard.html" then
  html.begin("fediboard");
  html.redheader("%s Fediboard", sitename);
  html.announce();
  printf("<a href=''>[Update]</a><hr /><div class='catalog-container'>");

  local overboard_tbl = pico.board.overboard();

  local following = json.webring()["following"];
  for i = 1, #following do
    local endpoint = requests.get(following[i]);
    if endpoint["status_code"] == 200 then
      local remote_webring = assert(json.decode(endpoint["text"]));
      local remote_host = assert(remote_webring["url"]);
      local remote_overboard = requests.get(remote_host .. "/overboard.json");
      if remote_overboard["status_code"] == 200 then
        local remote_overboard_tbl = assert(json.decode(remote_overboard["text"]));
        for j = 1, #remote_overboard_tbl do
          remote_overboard_tbl[j]["Host"] = remote_host;
          overboard_tbl[#overboard_tbl + 1] = remote_overboard_tbl[j];
        end
      end
    end
  end

  table.sort(overboard_tbl,
    function(a, b) return a["LastBumpDate"] > b["LastBumpDate"] end);
  for i = 1, #overboard_tbl do
    html.rendercatalog(board_tbl, overboard_tbl[i]);
  end

  printf("</div>");
  html.finish();
elseif cgi.pathinfo[1] == "webring.json" then
  cgi.headers["Content-Type"] = "application/json";
  io.write(json.encode(json.webring()));
elseif cgi.pathinfo[1] == "overboard.json" then
  cgi.headers["Content-Type"] = "application/json";
  io.write(json.encode(pico.board.overboard()));
else
  local board_tbl = pico.board.tbl(cgi.pathinfo[1]);

  if not board_tbl then
    cgi.headers["Status"] = "404 Not Found";
    html.error("Board Not Found", "The board you specified does not exist.");
  end

  if cgi.pathinfo[2] == nil or cgi.pathinfo[2] == "" or cgi.pathinfo[2] == "catalog" or cgi.pathinfo[2] == "index" then
    html.begin("/%s/", board_tbl["Name"]);
    printf("<h1 id='boardtitle'>/%s/ - %s</h1>", board_tbl["Name"], html.striphtml(board_tbl["Title"]));
    printf("<h2 id='boardsubtitle'>%s</h2>", html.striphtml(board_tbl["Subtitle"]));
    html.announce();
    printf("<a id='new-post' href='#postform'>[Start a New Thread]</a>");
    html.form.postform(board_tbl, nil);
    printf("<a href=''>[Update]</a>");
    printf("<hr /><div class='catalog-container'>");

    if cgi.pathinfo[2] == nil or cgi.pathinfo[2] == "" or cgi.pathinfo[2] == "catalog" then
      local catalog_tbl = pico.board.catalog(board_tbl["Name"]);

      for i = 1, #catalog_tbl do
        html.rendercatalog(board_tbl, catalog_tbl[i]);
      end
    end

    printf("</div>");
    html.finish();
  else
    local thread_tbl, msg = pico.post.thread(board_tbl["Name"], cgi.pathinfo[2]);

    if not thread_tbl then
      local post_tbl = pico.post.tbl(board_tbl["Name"], cgi.pathinfo[2]);
      if not post_tbl then
        cgi.headers["Status"] = "404 Not Found";
        html.error("Thread Not Found", "Cannot display thread: %s", msg);
      else
        -- TODO: make hostname a global (or use request host)
        -- relying on webring.json
        webring_tbl = json.webring()
        cgi.headers["Status"] = "301 Moved Permanently";
        cgi.headers["Location"] = string.format("%s/%s/%s#%s",
          webring_tbl["url"], board_tbl["Name"], post_tbl["Parent"], post_tbl["Number"]);
        cgi.finalize();
      end
    end

    html.begin("/%s/ - %s", board_tbl["Name"], (thread_tbl[0]["Subject"] and #thread_tbl[0]["Subject"] > 0)
                                               and html.striphtml(thread_tbl[0]["Subject"])
                                               or html.striphtml(thread_tbl[0]["Comment"]:sub(1, 64)));
    printf("<h1 id='boardtitle'>/%s/ - %s</h1>", board_tbl["Name"], html.striphtml(board_tbl["Title"]));
    printf("<h2 id='boardsubtitle'>%s</h2>", html.striphtml(board_tbl["Subtitle"]));
    html.announce();
    printf("<a id='new-post' href='#postform'>[Make a Post]</a>");
    html.form.postform(board_tbl, cgi.pathinfo[2]);
    printf("<hr />");

    for i = 0, #thread_tbl do
      html.renderpost(board_tbl, thread_tbl[i]);
    end

    printf("<hr />");
    printf("<div id='thread-view-links'>");
    printf("<a href='/%s'>[Catalog]</a>", board_tbl["Name"]);
    printf("<a href='/overboard.html'>[Overboard]</a>");
    printf("<a href='/fediboard.html'>[Fediboard]</a>");
    printf("<a href=''>[Update]</a>");

    printf("<span id='thread-reply'>");
    printf("<a href='#postform'>[Reply]</a>");
    printf("%d replies",
           pico.post.threadreplycount(board_tbl["Name"], cgi.pathinfo[2]));
    printf("</span>");

    printf("</div>");
    html.finish();
  end
end

cgi.finalize();
%>
